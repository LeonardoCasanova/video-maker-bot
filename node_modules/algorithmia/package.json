{
  "_from": "algorithmia",
  "_id": "algorithmia@0.3.10",
  "_inBundle": false,
  "_integrity": "sha1-9xwgqf9WRmCk0c9zlHmV123jRQw=",
  "_location": "/algorithmia",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "algorithmia",
    "fetchSpec": "latest",
    "name": "algorithmia",
    "raw": "algorithmia",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/algorithmia/-/algorithmia-0.3.10.tgz",
  "_shasum": "f71c20a9ff564660a4d1cf73947995d76de3450c",
  "_spec": "algorithmia",
  "_where": "/home/leonardo/Documentos/Projetos/video-maker-bot",
  "bugs": {
    "url": "https://github.com/algorithmiaio/algorithmia-nodejs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Client library for calling algorithms in the Algorithmia marketplace",
  "devDependencies": {
    "gulp": "3.9.*",
    "gulp-coffee": "2.3.*"
  },
  "homepage": "https://github.com/algorithmiaio/algorithmia-nodejs#readme",
  "keywords": [
    "algorithm",
    "api",
    "cloud"
  ],
  "license": "MIT",
  "main": "./lib/algorithmia.js",
  "name": "algorithmia",
  "optionalDependencies": {},
  "readme": "algorithmia.js\n==============\n\nA nodejs library for calling algorithms on Algorithmia.com with partial support for the DataAPI\n\n[![npm](https://img.shields.io/npm/v/algorithmia.svg?maxAge=2592000)]()\n\n## Getting started\n\nThe official Algorithmia nodejs client is available on NPM.\nInstall it for your project by adding `algorithmia` to your package.json:\n\n```bash\nnpm install --save algorithmia\n```\n\nThen instantiate an Algorithmia client using your API key:\n\n```javascript\nvar algorithmia = require(\"algorithmia\");\n\nvar client = algorithmia(process.env.ALGORITHMIA_API_KEY);\n```\n\nNow you are ready to call algorithms.\n\n## Calling algorithms\n\nThe following examples of calling algorithms are organized by type of input/output which vary between algorithms.\n\nNote: a single algorithm may have different input and output types, or accept multiple types of input, so consult the algorithm's description for usage examples specific to that algorithm.\n\n### Text input/output\n\nCall an algorithm with text input by passing a string into the `pipe` method.\nThe returned promise will be called with the response with the Algorithm completes (or when an error occurs).\nIf the algorithm output is text, then the `get()` method on the response will return a string.\n\n```javascript\nclient.algo(\"algo://demo/Hello/0.1.1\")\n      .pipe(\"HAL 9000\")\n      .then(function(response) {\n        console.log(response.get());\n      });\n// -> Hello HAL 9000\n```\n\n### JSON input/output\n\nCall an algorithm with JSON input by passing in a native JavaScript type;\nmost of the time this will be an `Object` or an `Array` (though `Boolean`, `Number`, and `Null` are possible).\nSimilarly, if the algorithm response is JSON, the `get()` method will return the appropriate native JavaScript type.\n\n```javascript\nclient.algo(\"algo://WebPredict/ListAnagrams/0.1.0\")\n      .pipe([\"transformer\", \"terraforms\", \"retransform\"])\n      .then(function(response) {\n        console.log(response.get());\n        // -> [\"transformer\",\"retransform\"]\n      });\n```\n\nAlternatively, if you already have serialized JSON, you can call `pipeJson` with the raw JSON string.\nThe following example makes the same API call as the previous example:\n\n```javascript\nclient.algo(\"algo://WebPredict/ListAnagrams/0.1.0\")\n      .pipeJson('[\"transformer\", \"terraforms\", \"retransform\"]')\n```\n\n### Binary input/output\n\nCall an algorithm with binary input by passing a `Buffer` into the pipe method.\nSimilarly, if the algorithm response is binary data, then the `get` method on the response will be a byte array.\n\n```javascript\nvar buffer = fs.readFileSync(\"/path/to/bender.jpg\");\nclient.algo(\"opencv/SmartThumbnail\")\n    .pipe(buffer)\n    .then(function(response) {\n        var buffer = response.get();\n        // -> Buffer(...)\n    });\n```\n\nNote: while it is possible to use `response.result` for text or JSON responses, in the case of a binary resonse,\nthe `result` field will be base64-encoded. The `get()` method is recommended\nbecause it will return the correct type in all cases.\n\n### Error handling\n\nIf an error occurs when calling an algorithm, the response will contain an error field that you can check:\n\n```javascript\nclient.algo('util/whoopsWrongAlgo').pipe('Hello, world!')\n      .then(function(response) {\n          if(response.error) {\n            console.log(\"Error: \" + response.error.message);\n          } {\n            console.log(response.get());\n          }\n      });\n```\n\n### Request options\n\nThe Algorithmia API exposes parameters to configure algorithm requests including support\nfor changing the timeout of indicating that the API should include stdout in the response.\nCurrently, the node.js client exposes these as query paremeters to the algorithm URI:\n\n```javascript\nclient.algo(\"algo://demo/Hello/0.1.1?timeout=10&stdout=true\")\n      .pipe(\"HAL 9000\")\n```\n\nNote: `stdout=true` is only supported if you have access to the algorithm source.\n\n## Working with data\n\nThe Algorithmia client also provides a way to manage both Algorithmia hosted data and data from Dropbox or S3 accounts that you've connected to you Algorithmia account.\n\n### Create directories\n\nCreate directories by instantiating a `Dir` object and calling `create()`:\n\n```javascript\nvar robots = client.dir(\"data://.my/robots\");\nrobots.create(function(response) {\n    if(response.error) {\n        return console.log(\"Failed to create dir: \" + response.error.message);\n    }\n    console.log(\"Created directory: \" + robots.data_path);\n});\n```\n\n### Upload files to a directory\n\nUpload files by calling the `putFile` method a `Dir` object or `put` on a `File` object:\n\n```javascript\nvar robots = client.dir(\"data://.my/robots\");\nrobots.putFile(\"/path/to/Optimus_Prime.png\", function(response) {\n    if(response.error) {\n        return console.log(\"Failed to upload file: \" + response.error.message);\n    }\n    console.log(\"File uploaded.\");\n);\n```\n\nYou can also write to a `File` using the `put` method with either a `string` or `Buffer` as input:\n\n```javascript\nvar prime = client.file(\"data://.my/robots/Optimus_Prime.txt\");\nprime.put(\"Leader of the Autobots\", function(response) {\n    if(response.error) {\n        return console.log(\"Failed to upload file: \" + response.error.message);\n    }\n    console.log(\"File uploaded.\");\n);\n```\n\n### Download content from files\n\nDownload files by calling `get` on a `File` object:\n\n```javascript\nvar robots = client.dir(\"data://.my/robots\");\n\n// Get a text file's contents as a string\nrobots.file(\"T-800.txt\").get(function(err, data) {\n    console.log(data);\n});\n\n/// Get a binary file's contents as a Buffer\nrobots.file(\"T-800.jpg\").get(function(err, data) {\n    console.log(\"Received \" + data.length + \" bytes.\");\n    fs.writeFileSync(\"/tmp/T-800.jpg\", data);\n});\n```\n\n### Delete files and directories\n\nDelete files by calling `delete` on their respective `File` or `Dir` object.\nWhen deleting directories, you may optionally specify a `force` argument\nthat indicates whether or not a directory should be deleted if it contains files or other directories (default = `false`).\n\n```javascript\nvar c3po = client.file(\"data://.my/robots/C-3PO.txt\");\nc3po.delete(function(response) {\n    if(response.error) {\n        return console.log(\"Failed to delete file: \" + response.error.message);\n    }\n    console.log(\"Deleted file: \" + c3po.data_path);\n});\n\n// Force delete a directory\nclient.dir(\"data://.my/robots\")\n    .delete(true, function(response) {\n        /* ommitting callback implementation */\n    });\n```\n\n### List directory contents\n\nIterate over the contents of a directory using the iterated returned by calling `forEachDir` or `forEachFile` on a `Dir` object:\n\n```javascript\n// List top level directories\nclient.dir(\"data://.my\").forEachDir(function(err, dir) {\n    if(err) {\n        return console.log(\"Error: \" + JSON.stringify(err));\n    }\n    console.log(dir.data_path);\n}).then(function() {\n    console.log(\"Finished listing directory\");\n});\n\n\n// List files in the Public folder of your connected Dropbox account\nclient.dir(\"dropbox://Public\").forEachFile(function(err, file) {\n    if(err) {\n        return console.log(\"Error: \" + JSON.stringify(err));\n    }\n    console.log(file.data_path);\n}).then(function() {\n    console.log(\"Finished listing directory\");\n});\n```\n\n## Building the client\n\nThis project uses gulp to compile coffeescript.\n\n```bash\nnpm install\nnpm install -g gulp-cli\n\ngulp\n```\n\nNote: Don't edit the .js in the `lib` directory; they will get overwritten on subsequent compiles.\nInstead, modify `.coffee` files in the `src` dir, and run `gulp`.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/algorithmiaio/algorithmia-nodejs.git"
  },
  "url": "http://github.com/algorithmiaio/algorithmia-nodejs",
  "version": "0.3.10"
}
